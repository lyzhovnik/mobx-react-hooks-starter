{
  "env": {
    "browser": true,
    "es6": true,
    "es2017": true,
    "es2020": true
  },
  "extends": [
    "prettier",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:promise/recommended",
    "plugin:sonarjs/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "parser": "@typescript-eslint/parser",
  "settings": {
    "react": {
      "version": "detect" // React version. "detect" automatically picks the version you have installed.
    }
  },
  "parserOptions": {
    "project": "tsconfig.json",
    "tsconfigRootDir": "."
  },
  "plugins": ["prettier", "react", "react-hooks", "promise", "optimize-regex", "sonarjs", "@typescript-eslint", "simple-import-sort"],
  "rules": {
    "prettier/prettier": ["error", { "printWidth": 120, "singleQuote": true, "arrowParens": "avoid", "trailingComma": "all" }], // enable prettier
    "comma-dangle": ["error", "always-multiline"], //requires trailing commas when the last element or property is in a different line
    "no-shadow": ["error", { "builtinGlobals": false }], // disallow variable declarations from shadowing variables declared in the outer scope
    "no-template-curly-in-string": "error", // disallow template literal placeholder syntax in regular strings
    "block-scoped-var": "error", // enforce the use of variables within the scope they are defined
    "curly": ["error", "all"], // enforce consistent brace style for all control statements
    "eqeqeq": "error", // equire the use of === and !==
    "max-classes-per-file": ["error", 1], // enforce a maximum number of classes per file
    "no-alert": "warn", // disallow the use of alert, confirm, and prompt
    "no-console": "warn", // disallow the use of console
    "no-else-return": ["error", { "allowElseIf": false }], // disallow else blocks after return statements in if statements
    "no-implicit-coercion": "error", // disallow shorthand type conversions
    "no-labels": "error", // disallow labeled statements
    "no-lone-blocks": "error", // disallow unnecessary nested blocks
    "no-multi-spaces": "error", // disallow multiple spaces
    "no-new": "error", // disallow new operators outside of assignments or comparisons
    "no-new-func": "error", // disallow new operators with the Function object
    "no-new-wrappers": "error", // disallow new operators with the String, Number, and Boolean objects
    "no-return-await": "error", // disallow unnecessary return await
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow comma operators
    "no-throw-literal": "error", // disallow throwing literals as exceptions
    "no-unused-expressions": "error", // disallow unused expressions
    "no-useless-call": "error", // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
    "no-useless-return": "error", // disallow redundant return statements
    "prefer-promise-reject-errors": "error", // require using Error objects as Promise rejection reasons
    "radix": "error", // enforce the consistent use of the radix argument when using parseInt()
    "comma-style": "error", // enforce consistent comma style
    "eol-last": "error", // require or disallow newline at the end of files
    "key-spacing": "error", // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": "error", // enforce consistent spacing before and after keywords
    "new-parens": "error", // enforce or disallow parentheses when invoking a constructor with no arguments
    "no-bitwise": "warn", // disallow bitwise operators
    "no-lonely-if": "warn", // disallow if statements as the only statement in else blocks
    "no-multiple-empty-lines": ["error", { "max": 1 }], // disallow multiple empty lines
    "no-new-object": "error", // disallow Object constructors
    "no-tabs": ["error", { "allowIndentationTabs": true }], // disallow all tabs
    "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
    "no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": "error", // disallow whitespace before properties
    "object-curly-newline": "error", // enforce consistent line breaks inside braces
    "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
    "semi-spacing": "error", // enforce consistent spacing before and after semicolons
    "space-before-blocks": "error", // enforce consistent spacing before blocks
    "space-before-function-paren": [
      "error", { "anonymous": "always", "named": "never", "asyncArrow": "always" }
    ], // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": "error", // enforce consistent spacing inside parentheses
    "space-infix-ops": "error", // require spacing around infix operators
    "space-unary-ops": "error", // enforce consistent spacing before or after unary operators
    "spaced-comment": ["error", "always"], // enforce consistent spacing after the // or /* in a comment
    "switch-colon-spacing": "error", // enforce spacing around colons of switch statements
    "arrow-body-style": ["error", "as-needed"], // require braces around arrow function bodies
    "arrow-parens": ["error", "as-needed"], // require parentheses around arrow function arguments
    "arrow-spacing": "error", // enforce consistent spacing before and after the arrow in arrow functions
    "generator-star-spacing": ["error", "after"], // enforce consistent spacing around * operators in generator functions
    "no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
    "no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
    "object-shorthand": ["error", "always"], // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": "warn", // require using arrow functions for callbacks
    "rest-spread-spacing": ["error", "never"], // enforce spacing between rest and spread operators and their expressions
    "simple-import-sort/sort": ["error", {
      "groups": [
        // First group:
        // Order react import, packages, things that start with a letter (or digit or underscore), or `@` followed by a
        // letter, Absolute imports and other imports such as Vue-style `@/foo`, Anything that does not start with a dot.
        ["^react$", "^@?\\w", "^[^.]"],
        // Second group:
        // Relative imports.
        // Anything that starts with a dot.
        ["^\\."],
        // Third group:
        // styles.
        ["scss$"],
        // Fourth group:
        // Side effect imports.
        ["^\\u0000"]
      ]
    }], // enforce sorted import declarations within modules
    "template-curly-spacing": "error", // require or disallow spacing around embedded expressions of template strings
    "optimize-regex/optimize-regex": "warn", // Optimize regex literals
    "@typescript-eslint/semi": ["error", "always"], // Require or disallow semicolons instead of ASI
    "@typescript-eslint/member-delimiter-style": ["error", { "multiline": { "delimiter": "semi" } }], // Require a specific member delimiter style for interfaces and type literals
    "@typescript-eslint/brace-style": ["error", "1tbs"], // Enforce consistent brace style for blocks
    "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }], // Enforce the consistent use of either backticks, double, or single quotes
    "@typescript-eslint/func-call-spacing": ["error", "never"], // Require or disallow spacing between function identifiers and their invocations
    "@typescript-eslint/no-useless-constructor": "error", // Disallow unnecessary constructors
    "@typescript-eslint/prefer-for-of": "warn", // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated
    "@typescript-eslint/no-parameter-properties": "error", // Disallow the use of parameter properties in class constructors
    "@typescript-eslint/no-unnecessary-type-arguments": "warn", // Warns if an explicitly specified type argument is the default for that type parameter
    "@typescript-eslint/prefer-function-type": "warn", // Use function types instead of interfaces with call signatures
    "@typescript-eslint/prefer-readonly": "warn", // Requires that private members are marked as readonly if they're never modified outside of the constructor
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_$" }],
    "react/no-access-state-in-setstate": "error", // Prevent using this.state inside this.setState
    "react/no-this-in-sfc": "error", // Prevent using this in stateless functional components
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
    "react/jsx-no-bind": ["error", { "allowArrowFunctions": true }], // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-literals": "off", //  Prevent usage of unwrapped JSX strings
    "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",

    // TODO: comment out rules below and uncomment rules after these rules for improving code quality.
    // For now these rules are disabled
    "promise/catch-or-return": "off", // disallow the use of promise without catch
    "promise/prefer-await-to-then": "off", // // refer await to then() for reading Promise values
    "@typescript-eslint/no-unsafe-member-access": "off",
    "react/prefer-stateless-function": "off", // Enforce stateless React Components to be written as a pure function
    "@typescript-eslint/camelcase": "off",
    "react/display-name": "off",
    "react/no-multi-comp": "off", // Prevent multiple component definition per file
    "@typescript-eslint/no-unsafe-assignment": "off", // Prevent assignment to any type
    "no-undefined": "off", // disallow the use of undefined as an identifier
    "@typescript-eslint/no-extra-parens": "off", // Disallow unnecessary parentheses
    "react/jsx-no-useless-fragment": "off", // // Disallow unnecessary fragments
    "@typescript-eslint/explicit-module-boundary-types": "off", // Disallow return types
    "@typescript-eslint/no-unsafe-call": "off", // Disallow call function from any type
    "react/jsx-key": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "no-nested-ternary": "off", // disallow nested ternary expressions
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/indent": "off", // Enforce consistent indentation
    "sonarjs/cognitive-complexity": "off",
    "no-duplicate-imports": "off", // disallow duplicate module imports
    "@typescript-eslint/no-unsafe-return": "off",
    "prefer-destructuring": "off", // require destructuring from arrays and/or objects
    "react/prop-types": "off", // require checking prop types
    "sonarjs/no-duplicate-string": "off", // Disallow duplicating code
    "sonarjs/no-identical-functions": "off", // Disallow duplicating code
    "react/no-danger": "off", // Prevent usage of dangerous JSX properties
    "no-confusing-arrow": "off", // disallow arrow functions where they could be confused with comparisons
    "promise/always-return": "off",
    "array-bracket-newline":  "off", // enforce linebreaks after opening and before closing array brackets
    "sonarjs/no-duplicated-branches":  "off",
    "@typescript-eslint/member-ordering": "off", // Require a consistent member declaration order
    "@typescript-eslint/no-non-null-assertion": "off",
    "promise/no-promise-in-callback": "off",
    "@typescript-eslint/no-magic-numbers": "off"


    //  "promise/catch-or-return": "error", // disallow the use of promise without catch
    //  "promise/prefer-await-to-then": "error", // // refer await to then() for reading Promise values
    //  "@typescript-eslint/no-unsafe-member-access": "error",
    //  "react/prefer-stateless-function": "error", // Enforce stateless React Components to be written as a pure function
    //  "@typescript-eslint/camelcase": ["error", { "properties": "never" }],
    //  "react/display-name": "error",
    //  "react/no-multi-comp": "error", // Prevent multiple component definition per file
    //  "@typescript-eslint/no-unsafe-assignment": "error", // Prevent assignment to any type
    //  "no-undefined": "error", // disallow the use of undefined as an identifier
    //  "@typescript-eslint/no-extra-parens": ["error", "all", { "ignoreJSX": "all" }], // Disallow unnecessary parentheses
    //  "react/jsx-no-useless-fragment": "error", // // Disallow unnecessary fragments
    //  "@typescript-eslint/explicit-module-boundary-types": "error", // Disallow return types
    //  "@typescript-eslint/no-unsafe-call": "error", // Disallow call function from any type
    //  "react/jsx-key": "error",
    //  "@typescript-eslint/no-floating-promises": "error",
    //  "no-nested-ternary": "error", // disallow nested ternary expressions
    //  "@typescript-eslint/restrict-template-expressions": "error",
    //  "@typescript-eslint/indent": ["error", 2, { "SwitchCase": 1 }], // Enforce consistent indentation
    //  "sonarjs/cognitive-complexity": "error",
    //  "no-duplicate-imports": ["error", { "includeExports": true }], // disallow duplicate module imports
    //  "@typescript-eslint/no-unsafe-return": "error",
    //  "prefer-destructuring": "error", // require destructuring from arrays and/or objects
    //  "react/prop-types": "error", // require checking prop types
    //  "sonarjs/no-duplicate-string": "error", // Disallow duplicating code
    //  "sonarjs/no-identical-functions": "error", // Disallow duplicating code
    //  "react/no-danger": "error", // Prevent usage of dangerous JSX properties
    //  "no-confusing-arrow": "error", // disallow arrow functions where they could be confused with comparisons
    //  "promise/always-return": "error",
    //  "array-bracket-newline":  ["error", { "multiline": true }], // enforce linebreaks after opening and before closing array brackets
    //  "sonarjs/no-duplicated-branches":  "error",
    //  "@typescript-eslint/member-ordering": "error", // Require a consistent member declaration order
    //  "@typescript-eslint/no-non-null-assertion": "error",
    //  "promise/no-promise-in-callback": "error",
    //  "@typescript-eslint/no-magic-numbers": "error",
    //  "@typescript-eslint/no-magic-numbers": [
    //      "error",
    //      {
    //          "ignoreNumericLiteralTypes": true,
    //          "ignoreEnums": true,
    //          "enforceConst": true,
    //          "ignoreReadonlyClassProperties": true,
    //          "ignore": [0, 24, 60, 1000]
    //      }
    //  ] // Disallows magic numbers
  }
}
